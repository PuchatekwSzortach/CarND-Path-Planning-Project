import numpy as np

import matplotlib.pyplot as plt


def evaluate_polynomial(coefficients, xs):

    ys = []

    for x in xs:

        y = (coefficients[0] * x * x) + (coefficients[1] * x) + coefficients[2]
        ys.append(y)

    return ys


def main():

    trajectories = [
        [6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, ],

        [6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483, 6.16483,
         6.16483, 6.16483, 6.16483, 6.16483, 6.16483, ],

    ]
    print(len(trajectories))
    trajectory = trajectories[1]

    x = np.linspace(0, len(trajectory) * 0.02, len(trajectory))

    plt.scatter(x, trajectory)
    plt.show()


if __name__ == "__main__":

    main()
